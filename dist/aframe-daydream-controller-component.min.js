!function(t){function e(n){if(o[n])return o[n].exports;var s=o[n]={exports:{},id:n,loaded:!1};return t[n].call(s.exports,s,s.exports,e),s.loaded=!0,s.exports}var o={};return e.m=t,e.c=o,e.p="",e(0)}([function(t,e){if("undefined"==typeof AFRAME)throw new Error("Component attempted to register before AFRAME was available.");var o=AFRAME.utils.bind,n=AFRAME.utils.trackedControls,s=AFRAME.THREE,r="https://raw.githubusercontent.com/TechnoBuddhist/VR-Controller-Daydream/master/vr_controller_daydream.obj",a="https://raw.githubusercontent.com/TechnoBuddhist/VR-Controller-Daydream/master/vr_controller_daydream.mtl",i="Daydream Controller";AFRAME.registerComponent("daydream-controller",{multiple:!1,schema:{buttonColor:{default:"#FAFAFA"},buttonTouchedColor:{default:"yellow"},buttonPressedColor:{default:"orange"},model:{default:!0},rotationOffset:{default:0},eyesToElbow:{default:{x:.175,y:-.3,z:-.03}},forearm:{default:{x:0,y:0,z:-.175}}},mapping:{axis0:"trackpad",axis1:"trackpad",button0:"trackpad",button1:"menu",button2:"system"},init:function(){this.controllerPresent=!1,this.isControllerPresent=n.isControllerPresent,this.buttonStates={},this.previousAxis=[],this.onModelLoaded=o(this.onModelLoaded,this),this.checkIfControllerPresent=o(this.checkIfControllerPresent,this),this.onGamepadConnected=o(this.onGamepadConnected,this),this.onGamepadDisconnected=o(this.onGamepadDisconnected,this)},tick:function(t,e){if(this.controller){var o=this.el.getObject3D("mesh");o&&o.update&&o.update(e/1e3),this.updatePose(),this.updateButtons()}},play:function(){this.checkIfControllerPresent(),window.addEventListener("gamepadconnected",this.onGamepadConnected,!1),window.addEventListener("gamepaddisconnected",this.onGamepadDisconnected,!1)},pause:function(){window.removeEventListener("gamepadconnected",this.onGamepadConnected,!1),window.removeEventListener("gamepaddisconnected",this.onGamepadDisconnected,!1)},checkIfControllerPresent:function(){var t=this.isControllerPresent(this.el.sceneEl,i,{});if(t!==this.controllerPresent)if(this.controllerPresent=t,t){if(this.el.addEventListener("model-loaded",this.onModelLoaded),this.controller=n.getGamepadsByPrefix(i)[0],!this.data.model)return;this.el.setAttribute("obj-model",{obj:r,mtl:a})}else this.controller=null,this.el.removeAttribute("obj-model"),this.el.removeEventListener("model-loaded",this.onModelLoaded)},onGamepadConnected:function(t){this.checkIfControllerPresent()},onGamepadDisconnected:function(t){this.checkIfControllerPresent()},onModelLoaded:function(t){var e,o=t.detail.model;this.data.model&&(e=this.buttonMeshes={},e.menu=o.getObjectByName("AppButton_AppButton_Cylinder.004"),e.system=o.getObjectByName("HomeButton_HomeButton_Cylinder.005"),e.trackpad=o.getObjectByName("TouchPad_TouchPad_Cylinder.003"),o.position.set(0,0,-.04))},updateButtonModel:function(t,e){var o=this.data.buttonColor;"touchstart"===e||"up"===e?o=this.data.buttonTouchedColor:"down"===e&&(o=this.data.buttonPressedColor);var n=this.buttonMeshes;n&&n[t].material.color.set(o)},updatePose:function(){var t=new s.Vector3,e=new s.Vector3,o=new s.Quaternion,n=new s.Euler(0,0,0,"YXZ");return function(){var s=this.controller,r=s.pose,a=this.el,i=this.el.sceneEl.camera,d=i.el.components.camera,l=this.data.eyesToElbow,c=this.data.forearm;e.copy(i.el.object3D.position),t.set("left"===this.data.hand?-l.x:l.x,l.y,l.z),t.multiplyScalar(d.data.userHeight),t.applyAxisAngle(i.el.object3D.up,i.el.object3D.rotation.y),e.add(t),t.set(c.x,c.y,c.z),t.multiplyScalar(d.data.userHeight),o.fromArray(r.orientation||[0,0,0,1]),n.setFromQuaternion(o),n.set(n.x,n.y,0),t.applyEuler(n),e.add(t),a.setAttribute("position",{x:e.x,y:e.y,z:e.z}),a.object3D.quaternion.copy(o)}}(),updateButtons:function(){this.controller&&(this.handleTrackpadButton(),this.handleTrackpadGestures())},handleTrackpadGestures:function(){var t,e=this.controller.axes,o=this.previousAxis,n=!1;for(t=0;t<e.length;++t)if(o[t]!==e[t]){n=!0;break}n&&(this.previousAxis=e.slice(),this.el.emit("axismove",{axis:this.previousAxis}))},handleTrackpadButton:function(){var t=0,e=this.controller.buttons[t],o=!1;o=o||this.handlePress(t,e),o=o||this.handleTrackpadTouch(t,e),o&&this.el.emit("buttonchanged",{id:t,state:e})},handleMenuButton:function(){},handleSystemButton:function(){},handlePress:function(t,e){var o,n,s=this.buttonStates,r=s[t]=s[t]||{};return e.pressed!==r.pressed&&(o=e.pressed?"down":"up",this.el.emit("button"+o,{id:t}),n=this.mapping["button"+t],this.updateButtonModel(n,o),r.pressed=e.pressed,!0)},handleTrackpadTouch:function(t,e){var o,n,s=this.buttonStates,r=s[t]=s[t]||{};return e.touched!==r.touched&&(o=e.touched?"start":"end",r.touched=e.touched,this.el.dispatchEvent(new CustomEvent("touch"+o,{touches:[],detail:{id:t,state:r,axis:this.controller.axes}})),n=this.mapping["button"+t],this.updateButtonModel(n,"touch"+o),!0)}})}]);